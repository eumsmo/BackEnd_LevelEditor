using UnityEngine;
using System.Collections.Generic;

public class Objeto_Instancia {
    public Objeto objeto;
    public GameObject gameObject;
}

[System.Serializable]
public class PrefabsDoMapa {
    public GameObject virus;
    public GameObject inicio;
    public GameObject fim;
    public GameObject roboControlavel;

    public GameObject GetPrefab(TipoObjeto tipo) {
        switch (tipo) {
            case TipoObjeto.NENHUM:
                return null;
            case TipoObjeto.INICIO:
                return inicio;
            case TipoObjeto.FIM:
                return fim;
            case TipoObjeto.ROBO_CONTROLAVEL:
                return roboControlavel;
            default:
                return null;
        }
    }
}

public class MapManager : MonoBehaviour {
    public static MapManager instance;

    public float cellSize = 1f;
    public GameObject cellPrefab;

    public Mapa mapa {get; private set; }
    public int[][] grid { get; private set; }
    public Dictionary<string, Objeto_Instancia> objetos = new Dictionary<string, Objeto_Instancia>();

    public PrefabsDoMapa prefabsDoMapa;


    private void Awake() {
        if (instance == null) {
            instance = this;
        } else {
            Destroy(gameObject);
        }
    }

    public void SetMapa(Mapa mapa) {
        this.mapa = mapa;

        CreateGrid();
        CreateObjetos();
    }

    protected void CreateGrid() {
        grid = new int[mapa.altura][];

        for (int i = 0; i < mapa.altura; i++) {
            grid[i] = new int[mapa.largura];

            for (int j = 0; j < mapa.altura; j++) {
                grid[i][j] = 0;
            }
        }


        foreach (Chao chao in mapa.chaos) {
            CreateChaoAt(chao.x, chao.y, chao.largura, chao.altura);

            // Grid de colisÃ£o
            for (int i = 0; i < chao.largura; i++) {
                for (int j = 0; j < chao.altura; j++) {
                    grid[chao.y + j][chao.x + i] = 1;
                }
            }
        }
    }

    public GameObject CreateChaoAt(int x, int y, int largura, int altura) {
        GameObject cell = Instantiate(cellPrefab, GetCellPosition(x, y), Quaternion.identity);
        cell.transform.SetParent(transform);
        cell.transform.localScale = new Vector3(largura * cellSize, altura * cellSize, cellSize);

        Vector3 pos = cell.transform.position;
        pos.x += (largura - 1) * cellSize / 2f;
        pos.y -= (altura - 1) * cellSize / 2f;
        cell.transform.position = pos;

        cell.name = $"Cell_{x}_{y}";

        return cell;
    }

    protected void CreateObjetos() {
        foreach (Objeto objeto in mapa.objetos) {
            CriarObjeto(objeto);
        }
    }

    public bool CriarObjeto(Objeto objeto) {
        string key = $"{objeto.posicao.x}_{objeto.posicao.y}";

        if (!objetos.ContainsKey(key)) {
            GameObject prefab = prefabsDoMapa.GetPrefab(objeto.tipo);
            if (prefab == null) return false;

            GameObject obj = Instantiate(prefab, GetCellPosition(objeto.posicao.x, objeto.posicao.y), Quaternion.identity);
            obj.transform.SetParent(transform);
            obj.transform.localScale = new Vector3(cellSize, cellSize, cellSize);

            obj.transform.right = Mapa.DirecaoToVectorVisual(objeto.direcao);

            Controlavel controlavel = obj.GetComponent<Controlavel>();
            if (controlavel != null) {
                controlavel.objeto = objeto;
            }

            Andavel andavel = obj.GetComponent<Andavel>();
            if (andavel != null) {
                andavel.OnPosicaoMudou += gridPos => AtualizarPosicaoObjeto(objeto);
            }


            obj.name = $"{objeto.tipo}_{key}";
            objetos[key] = new Objeto_Instancia { objeto = objeto, gameObject = obj };
            return true;
        }

        return false;
    }

    public void CadastrarObjeto(Objeto objeto, GameObject obj) {
        string key = $"{objeto.posicao.x}_{objeto.posicao.y}";
        if (objetos.ContainsKey(key)) return;

        Andavel andavel = obj.GetComponent<Andavel>();
        if (andavel != null) {
            andavel.OnPosicaoMudou += gridPos => AtualizarPosicaoObjeto(objeto);
        }

        obj.name = $"{objeto.tipo}_{key}";
        objetos[key] = new Objeto_Instancia { objeto = objeto, gameObject = obj };
    }

    public void RemoverObjeto(Objeto objeto) {
        string key = GetObjetoKeyByObjeto(objeto);
        if (objetos.ContainsKey(key)) {
            objetos.Remove(key);
        }
    }

    void AtualizarPosicaoObjeto(Objeto objeto) {
        string keyAntiga = GetObjetoKeyByObjeto(objeto);
        string novaKey = $"{objeto.posicao.x}_{objeto.posicao.y}";

        if (keyAntiga == "" || keyAntiga == novaKey) return;

        if (objetos.ContainsKey(keyAntiga)) {
            Objeto_Instancia objetoInstancia = objetos[keyAntiga];
            objetos.Remove(keyAntiga);
            objetos[novaKey] = objetoInstancia;
        }
    }


    public bool CanMoveTo(int x, int y) {
        if (x < 0 || y < 0 || x >= mapa.largura || y >= mapa.altura) {
            return false;
        }

        if (objetos.ContainsKey($"{x}_{y}")) {
            return false;
        }

        return grid[y][x] == 1;
    }

    public Vector2 GetCellPosition(int x, int y) {
        return new Vector2(x * cellSize, -y * cellSize) + (Vector2)transform.position;
    }

    public Objeto GetObjetoAt(int x, int y) {
        string key = $"{x}_{y}";
        if (objetos.ContainsKey(key)) {
            return objetos[key].objeto;
        }
        return null;
    }

    public Objeto GetObjeto(GameObject obj) {
        foreach (var entry in objetos) {
            if (entry.Value.gameObject == obj) {
                return entry.Value.objeto;
            }
        }

        return null;
    }

    public GameObject GetInstance(Objeto objeto) {
        foreach (var entry in objetos) {
            if (entry.Value.objeto == objeto) {
                return entry.Value.gameObject;
            }
        }

        return null;
    }

    public (int x, int y) GetPosicaoFromWorldPos(Vector3 worldPos) {
        Vector3 localPos = transform.InverseTransformPoint(worldPos);
        localPos.x += cellSize / 2f;
        localPos.y -= cellSize / 2f;

        int x = Mathf.FloorToInt(localPos.x / cellSize);
        int y = Mathf.FloorToInt(-localPos.y / cellSize);

        return (x, y);
    }

    public Objeto GetFirstObjetoThat(TipoObjeto tipo) {
        foreach (var entry in objetos) {
            if (entry.Value.objeto.tipo == tipo) {
                return entry.Value.objeto;
            }
        }

        return null;
    }

    public Objeto[] GetObjetos() {
        Objeto[] objetosArray = new Objeto[objetos.Count];
        int i = 0;
        foreach (var entry in objetos) {
            objetosArray[i] = entry.Value.objeto;
            i++;
        }

        return objetosArray;
    }

    protected string GetObjetoKeyByObjeto(Objeto objeto) {
        foreach (var entry in objetos) {
            if (entry.Value.objeto == objeto) {
                return entry.Key;
            }
        }

        return "";
    }

    public bool HasObjeto(Objeto objeto) {
        foreach (var entry in objetos) {
            if (entry.Value.objeto == objeto) {
                return true;
            }
        }

        return false;
    }
}
