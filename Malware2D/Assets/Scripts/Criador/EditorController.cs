using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System.Collections.Generic;

public class EditorController : MonoBehaviour {
    public static EditorController instance;

    [Header("UI")]
    public Text larguraMundoTxt;
    public Text alturaMundoTxt;
    public Transform chaoContainer;
    public Aba[] abas;
    public Text instrucaoObjetosTxt;
    public Text offsetTxt;
    public Text mouseAtTxt;
    public Text saveLogTxt;
    public GameObject painelSair;


    [Header("Prefabs")]
    public GameObject criarChaoPrefab;


    // Definir chão
    string abaAtual = "Mundo";
    public int larguraMundo = 0;
    public int alturaMundo = 0;

    // Colocar objetos
    Direcao[] ordemDirecao = new Direcao[]{ Direcao.DIREITA, Direcao.BAIXO, Direcao.ESQUERDA, Direcao.CIMA };
    int direcaoVisualizarAtual = 0;
    bool isSelecionadoUnico = false;
    TipoObjeto prefabSelecionado = TipoObjeto.NENHUM;
    GameObject visualizarPrefabSelecionado;

    // Mover pelo mundo
    Vector3 posicaoInicial;
    int offsetX = 0;
    int offsetY = 0;


    void Awake() {
        if (instance == null) {
            instance = this;
        } else {
            Destroy(gameObject);
            return;
        }
    }

    void Start() {
        foreach (Transform chao in chaoContainer) {
            Destroy(chao.gameObject);
        }

        AbrirAba("Mundo");

        posicaoInicial = MapManager.instance.transform.position;
    }

    void FixedUpdate() {
        if (!IsMouseOutsideScreen()) {
            Vector3 mouseWorldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
            mouseWorldPos.z = 0f;
            (int x, int y) = MapManager.instance.GetPosicaoFromWorldPos(mouseWorldPos);
            mouseAtTxt.text = $"Mouse at: ({x}, {y})";

            if (visualizarPrefabSelecionado != null) {
                Vector2 posicao = MapManager.instance.GetCellPosition(x, y);
                visualizarPrefabSelecionado.transform.position = new Vector3(posicao.x, posicao.y, 0f);
            }
        }
    }

    void Update() {
        if (visualizarPrefabSelecionado != null) {
            if (Input.GetKeyDown(KeyCode.E)) {
                direcaoVisualizarAtual++;
                if (direcaoVisualizarAtual >= ordemDirecao.Length) {
                    direcaoVisualizarAtual = 0;
                }

                visualizarPrefabSelecionado.transform.right = Mapa.DirecaoToVectorVisual(ordemDirecao[direcaoVisualizarAtual]);
            } else if (Input.GetKeyDown(KeyCode.Q)) {
                direcaoVisualizarAtual--;
                if (direcaoVisualizarAtual < 0) {
                    direcaoVisualizarAtual = ordemDirecao.Length - 1;
                }

                visualizarPrefabSelecionado.transform.right = Mapa.DirecaoToVectorVisual(ordemDirecao[direcaoVisualizarAtual]);
            }
        }

        bool alteracao = false;
        if (Input.GetKeyDown(KeyCode.W)) {
            offsetY--;
            alteracao = true;
        } else if (Input.GetKeyDown(KeyCode.S)) {
            offsetY++;
            alteracao = true;
        } else if (Input.GetKeyDown(KeyCode.A)) {
            offsetX--;
            alteracao = true;
        } else if (Input.GetKeyDown(KeyCode.D)) {
            offsetX++;
            alteracao = true;
        }

        if (alteracao) {
            offsetX = Mathf.Max(offsetX, 0);
            offsetY = Mathf.Max(offsetY, 0);

            float cellSize = MapManager.instance.cellSize;
            Vector3 novaPosicao = new Vector3(-offsetX * cellSize, offsetY * cellSize, 0f) + posicaoInicial;
            MapManager.instance.transform.position = novaPosicao;

            offsetTxt.text = $"Offset: ({offsetX}, {offsetY})";
        }
    }

    public void OnClick(bool esquerdo) {
        if (IsMouseOutsideScreen()) return;
        Vector3 mouseWorldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        mouseWorldPos.z = 0f;
        (int x, int y) = MapManager.instance.GetPosicaoFromWorldPos(mouseWorldPos);

        if (x < 0 || y < 0) return;
        
        Objeto objeto = MapManager.instance.GetObjetoAt(x, y);
        if (objeto != null) {
            GameObject instancia = MapManager.instance.GetInstance(objeto);
            if (instancia != null) Destroy(instancia);
            MapManager.instance.RemoverObjeto(objeto);
            AjustarTamanhoDoMundo();
        }
        if (!esquerdo || prefabSelecionado == TipoObjeto.NENHUM) return;

        if (isSelecionadoUnico) {
            objeto = MapManager.instance.GetFirstObjetoThat(prefabSelecionado);
            if (objeto != null) {
                GameObject instancia = MapManager.instance.GetInstance(objeto);
                if (instancia != null) Destroy(instancia);
                MapManager.instance.RemoverObjeto(objeto);
            }
        }

        objeto = new Objeto();
        objeto.tipo = prefabSelecionado;
        objeto.posicao = new GridPos(x, y);
        objeto.direcao = ordemDirecao[direcaoVisualizarAtual];

        MapManager.instance.CriarObjeto(objeto);

        AjustarTamanhoDoMundo();
    }

    bool IsMouseOutsideScreen() {
        Vector3 mousePos = Input.mousePosition;
        return mousePos.x < 0 || mousePos.x > Screen.width || mousePos.y < 0 || mousePos.y > Screen.height;
    }


    public void AjustarTamanhoDoMundo() {
        int maiorX = 0, maiorY = 0;

        foreach (Transform child in chaoContainer) {
            CriarChao criarChao = child.GetComponent<CriarChao>();
            if (criarChao != null) {
                maiorX = Mathf.Max(maiorX, criarChao.largura + criarChao.posicaoX);
                maiorY = Mathf.Max(maiorY, criarChao.altura + criarChao.posicaoY);
            }
        }

        Objeto[] objetos = MapManager.instance.GetObjetos();
        foreach (Objeto objeto in objetos) {
            maiorX = Mathf.Max(maiorX, objeto.posicao.x + 1);
            maiorY = Mathf.Max(maiorY, objeto.posicao.y + 1);
        }


        larguraMundo = maiorX;
        alturaMundo = maiorY;

        larguraMundoTxt.text = larguraMundo.ToString();
        alturaMundoTxt.text = alturaMundo.ToString();
    }


    #region Chao

    public void CriarChao() {
        GameObject chao = Instantiate(criarChaoPrefab, chaoContainer);
        CriarChao criarChao = chao.GetComponent<CriarChao>();

        criarChao.larguraInput.text = "1";
        criarChao.alturaInput.text = "1";
        criarChao.posicaoXInput.text = "0";
        criarChao.posicaoYInput.text = "0";
        criarChao.CriarChaoInGame();
    }

    #endregion Chao

    #region Abas

    public void AbrirAba(string nome) {
        foreach (Aba aba in abas) {
            aba.Esconder();
        }

        abaAtual = nome;

        foreach (Aba aba in abas) {
            if (aba.nome == nome) {
                aba.Mostrar();
                break;
            }
        }


        switch (nome) {
            case "Mundo":
                instrucaoObjetosTxt.gameObject.SetActive(false);
                SelecionarObj(TipoObjeto.NENHUM);
                break;
            case "Objetos":
                instrucaoObjetosTxt.gameObject.SetActive(true);
                break;
            default:
                instrucaoObjetosTxt.gameObject.SetActive(false);
                break;
        }
    }

    #endregion Abas

    #region Objetos 

    public void SelecionarObj(TipoObjeto tipo, bool unico = false) {
        GameObject prefab = MapManager.instance.prefabsDoMapa.GetPrefab(tipo);

        if (visualizarPrefabSelecionado != null) {
            Destroy(visualizarPrefabSelecionado);
        }

        isSelecionadoUnico = unico;
        direcaoVisualizarAtual = 0;
        prefabSelecionado = tipo;

        if (prefab == null) {
            visualizarPrefabSelecionado = null;
            return;
        }

        visualizarPrefabSelecionado = Instantiate(prefab, MapManager.instance.transform);
        visualizarPrefabSelecionado.transform.position = new Vector3(0, 0, 0);

        float cellSize = MapManager.instance.cellSize;
        visualizarPrefabSelecionado.transform.localScale = new Vector3(cellSize, cellSize, cellSize);
    }

    #endregion Objetos

    #region Salvar

    public MapaData GetMapaData() {
        MapaData mapaData = new MapaData();

        AjustarTamanhoDoMundo();
        mapaData.largura = larguraMundo;
        mapaData.altura = alturaMundo;

        mapaData.chaos = new Chao[chaoContainer.childCount];

        for (int i = 0; i < chaoContainer.childCount; i++) {
            CriarChao criarChao = chaoContainer.GetChild(i).GetComponent<CriarChao>();
            mapaData.chaos[i] = new Chao() {
                x = criarChao.posicaoX,
                y = criarChao.posicaoY,
                largura = criarChao.largura,
                altura = criarChao.altura
            };
        }

        Objeto[] objetos = MapManager.instance.GetObjetos();
        mapaData.objetos = new ObjetoData[objetos.Length];

        for (int i = 0; i < objetos.Length; i++) {
            ObjetoData objetoData = new ObjetoData();
            objetoData.tipo = objetos[i].tipo.ToString();
            objetoData.posicao = objetos[i].posicao;
            objetoData.direcao = objetos[i].direcao.ToString();
            mapaData.objetos[i] = objetoData;
        }

        return mapaData;
    }

    public bool ChecarValidadeDoMapa(List<string> logs = null) {
        System.Action<string> Log;

        if (logs == null) Log = (msg) => Debug.Log(msg);
        else Log = (msg) => logs.Add(msg);

        if (larguraMundo <= 0 || alturaMundo <= 0) {
            Log("O mapa deve ter largura e altura maiores que zero.");
            return false;
        }

        if (chaoContainer.childCount == 0) {
           Log("O mapa deve ter pelo menos um chão.");
            return false;
        }

        bool temComeco = false, temFim = false;

        Objeto[] objetos = MapManager.instance.GetObjetos();
        foreach (Objeto objeto in objetos) {
            if (objeto.tipo == TipoObjeto.INICIO) {
                temComeco = true;
            } else if (objeto.tipo == TipoObjeto.FIM) {
                temFim = true;
            }
        }

        if (!temComeco) {
            Log("O mapa deve ter pelo menos um objeto do tipo INICIO.");
            return false;
        }

        if (!temFim) {
            Log("O mapa deve ter pelo menos um objeto do tipo FIM.");
            return false;
        }

        return true;
    }

    public void SalvarMapa() {
        List<string> logs = new List<string>();

        if (!ChecarValidadeDoMapa(logs)) {
            Debug.LogError("O mapa não é válido. Não pode ser salvo.");
            saveLogTxt.text = "ERRO: Não foi possível salvar o mapa.\n" + string.Join("\n", logs);
            return;
        }

        MapaData mapaData = GetMapaData();
        string json = JsonUtility.ToJson(mapaData, true);

        string path = System.IO.Path.Combine(Application.dataPath, "mapa.json");
        System.IO.File.WriteAllText(path, json);

        saveLogTxt.text = $"Mapa salvo em: {path}";
    }

    #endregion Salvar

    public void Sair() {
        if (painelSair.activeSelf) {
            painelSair.SetActive(false);
        } else {
            painelSair.SetActive(true);
        }
    }

    public void SairDeVerdade() {
        if (painelSair.activeSelf) {
            painelSair.SetActive(false);
        }

        SceneManager.LoadScene("Menu");
    }
}
