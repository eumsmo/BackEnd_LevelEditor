using UnityEngine;

public enum Direcao {
    CIMA,
    BAIXO,
    ESQUERDA,
    DIREITA
}

public enum TipoObjeto {
    NENHUM,
    INICIO,
    FIM,
    ROBO_CONTROLAVEL
}


[System.Serializable]
public struct GridPos {
    public int x;
    public int y;

    public bool isValid => x >= 0 && y >= 0;

    public GridPos(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void Mover(int dx, int dy) {
        x += dx;
        y += dy;
    }

    public void Mover(Direcao direcao) {
        switch (direcao) {
            case Direcao.CIMA:
                y--;
                break;
            case Direcao.BAIXO:
                y++;
                break;
            case Direcao.ESQUERDA:
                x--;
                break;
            case Direcao.DIREITA:
                x++;
                break;
        }
    }
}

[System.Serializable]
public class Objeto {
    public TipoObjeto tipo;
    public GridPos posicao;
    public Direcao direcao;
}

[System.Serializable]
public class Chao {
    public int x;
    public int y;
    public int largura;
    public int altura;
}

[System.Serializable]
public class Mapa {
    public int largura;
    public int altura;
    public Chao[] chaos;
    public Objeto[] objetos;


    public static Vector2 DirecaoToVector(Direcao direcao) {
        switch (direcao) {
            case Direcao.CIMA:
                return Vector2.down;
            case Direcao.BAIXO:
                return Vector2.up;
            case Direcao.ESQUERDA:
                return Vector2.left;
            case Direcao.DIREITA:
                return Vector2.right;
            default:
                return Vector2.zero;
        }
    }

    public static Vector2 DirecaoToVectorVisual(Direcao direcao) {
        switch (direcao) {
            case Direcao.CIMA:
                return Vector2.up;
            case Direcao.BAIXO:
                return Vector2.down;
            case Direcao.ESQUERDA:
                return Vector2.left;
            case Direcao.DIREITA:
                return Vector2.right;
            default:
                return Vector2.zero;
        }
    }

    public static Direcao VectorToDirecao(Vector2 direcao) {
        if (direcao == Vector2.up) return Direcao.BAIXO;
        if (direcao == Vector2.down) return Direcao.CIMA;
        if (direcao == Vector2.left) return Direcao.ESQUERDA;
        if (direcao == Vector2.right) return Direcao.DIREITA;
        return Direcao.CIMA; // Default direction
    }

    public static Direcao VectorToDirecaoVisual(Vector2 direcao) {
        if (direcao == Vector2.up) return Direcao.CIMA;
        if (direcao == Vector2.down) return Direcao.BAIXO;
        if (direcao == Vector2.left) return Direcao.ESQUERDA;
        if (direcao == Vector2.right) return Direcao.DIREITA;
        return Direcao.CIMA; // Default direction
    }
}


[System.Serializable]
public class MapaData {
    public int largura;
    public int altura;
    public Chao[] chaos;
    public ObjetoData[] objetos;
}

[System.Serializable]
public class ObjetoData {
    public string tipo;
    public GridPos posicao;
    public string direcao;
}